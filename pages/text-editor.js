import Head from 'next/head'
import Navbar from "../components/general/navbar/Navbar"
import { useEffect } from 'react';
import { useMonaco } from "@monaco-editor/react";
import dynamic from 'next/dynamic';
import { options, languageDef, configuration } from '../editor/editorConfig';

const MonacoEditor = dynamic(() => 
  import('@monaco-editor/react'), 
  {
    ssr: false,
  },   
);

function createTagDependencyProposals(range) {
    return [
          {
              label: '\\"lodash"',
              kind: monaco.languages.CompletionItemKind.Function,
              documentation: 'The Lodash library exported as Node.js modules.',
              insertText: '"lodash": "*"',
              range: range
          },
    ]
  }

export default function TextEditor() {
    const monaco = useMonaco();
    useEffect(() => {
      if (monaco && !monaco.languages.getLanguages().some(({ id }) => id === 'sampleLanguage')) {
        monaco.languages.register({ id: 'sampleLanguage' });
        monaco.languages.setMonarchTokensProvider('sampleLanguage', languageDef);
        monaco.languages.setLanguageConfiguration('sampleLanguage', configuration);
        monaco.languages.registerCompletionItemProvider('sampleLanguage', {
          triggerCharacters: ['.', ' '],
          provideCompletionItems: (model, position) => {
            // find out if we are completing a property in the 'dependencies' object.
            var textUntilPosition = model.getValueInRange({
              startLineNumber: 1,
              startColumn: 1,
              endLineNumber: position.lineNumber,
              endColumn: position.column
            });
            // /(\\t.*($|\n))/g
            // ([a-zA-Z]+)((?:\\.[a-zA-Z]+)*)
            // var tagMatch = textUntilPosition.match(/\\t/g);
            // var todayMatch = textUntilPosition.match(/\\today/g);
            // var testMatch = textUntilPosition.match(/cheese/g)
            console.log(textUntilPosition);
            var match = textUntilPosition.match(/"dependencies"\s*:\s*\{\s*("[^"]*"\s*:\s*"[^"]*"\s*,\s*)*([^"]*)?$/);
            if (!match) {
              return { suggestions: [] };
            } else {
              var word = model.getWordUntilPosition(position);
              var range = {
                startLineNumber: position.lineNumber,
                endLineNumber: position.lineNumber,
                startColumn: word.startColumn,
                endColumn: word.endColumn
              };
  
              return {suggestions: createTagDependencyProposals(range)};
            }
          }
        });
        monaco.editor.defineTheme("sampleTheme", {
          base: "vs-dark",
          inherit: false,
          rules: [
            { token: "today", foreground: "#ff0000" },
            { token: "tomorrow", foreground: "#ff0000" },
            { token: "t", foreground: "#0000ff" },
            { token: "p1", foreground: "#00ff00" },
            { token: "p2", foreground: "#ffff00" },
            { token: "p3", foreground: "#ffa200" },
            { token: "p4", foreground: "#ff6600" },
            { token: "p5", foreground: "#ff0000" },
          ],
          colors: { 
            "editor.background": "#000000",
            "editor.foreground": "#ffffff",
          },
          scrollBar: {horizontal: 'auto'}
        });
        monaco.editor.setTheme('sampleTheme');
      }
    }, [monaco]);
  
  
    return (
      <div className='h-screen'>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
  
        <div>
            <Navbar />
            <h1>Text Editor</h1>
            <MonacoEditor
            height="90vh"
            language='sampleLanguage'
            options={options}
            theme="sampleTheme"
            value=""
            // onChange={newText => console.log(newText)}
            editorDidMount={editor => { editor.focus() }}
            />
        </div>
      </div>
    )
}