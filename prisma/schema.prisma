// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id         String     @id @unique @default(uuid())
  owner      User?      @relation(fields: [ownerId], references: [id])
  ownerId    String?    
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  title      String
  details    String?
  completed  Boolean    @default(false)
  dueDate    DateTime?  @db.Timestamptz(3)
  start      DateTime?  @db.Timestamptz(3)
  end        DateTime?  @db.Timestamptz(3)
  priority   Int        @default(1)
  category   Category?  @relation(fields: [categoryId], references: [id])
  categoryId String?
  subtasks   String[]
  reminders  Json?      @default("{}")
}

model Category {
  id       String    @id @unique @default(uuid())
  owner    User?      @relation(fields: [ownerId], references: [id])
  ownerId  String?    
  name     String
  color    String
  Task     Task[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @unique @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  tasks         Task[]
  categories    Category[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}